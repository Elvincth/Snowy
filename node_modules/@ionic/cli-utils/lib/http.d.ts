/// <reference types="node" />
import * as superagentType from 'superagent';
import { APIResponse, APIResponseError, APIResponseSuccess, APIResponseMeta, APIResponsePageTokenMeta, HttpMethod, IClient, IConfig, IPaginator, PagePaginatorState, PaginateArgs, PaginatorGuard, PaginatorDeps, PaginatorRequestGenerator, ResourceClientRequestModifiers, TokenPaginatorState, Response, SuperAgentError } from '../definitions';
import { FatalException } from './errors';
export declare const CONTENT_TYPE_JSON = "application/json";
export declare const ERROR_UNKNOWN_CONTENT_TYPE = "UNKNOWN_CONTENT_TYPE";
export declare const ERROR_UNKNOWN_RESPONSE_FORMAT = "UNKNOWN_RESPONSE_FORMAT";
export declare function createRawRequest(method: string, url: string): Promise<{
    req: superagentType.SuperAgentRequest;
}>;
export declare abstract class ResourceClient {
    protected applyModifiers(req: superagentType.Request, modifiers?: ResourceClientRequestModifiers): void;
    protected applyAuthentication(req: superagentType.Request, token: string): void;
}
export declare function createRequest(config: IConfig, method: string, url: string): Promise<{
    req: superagentType.SuperAgentRequest;
}>;
export declare function download(config: IConfig, url: string, ws: NodeJS.WritableStream, opts?: {
    progress?: (loaded: number, total: number) => void;
}): Promise<void>;
export declare class Client implements IClient {
    config: IConfig;
    constructor(config: IConfig);
    make(method: HttpMethod, path: string): Promise<{
        req: superagentType.SuperAgentRequest;
    }>;
    do(req: superagentType.SuperAgentRequest): Promise<APIResponseSuccess>;
    paginate<T extends Response<object[]>>(args: PaginateArgs<T>): IPaginator<T>;
}
export declare class Paginator<T extends Response<Object[]>> implements IPaginator<T> {
    readonly state: PagePaginatorState;
    protected client: IClient;
    protected reqgen: PaginatorRequestGenerator;
    protected guard: PaginatorGuard<T>;
    protected max?: number;
    constructor({client, reqgen, guard, state, max}: PaginatorDeps<T, PagePaginatorState>);
    next(): IteratorResult<Promise<T>>;
    [Symbol.iterator](): this;
}
export declare class TokenPaginator<T extends Response<object[]>> implements IPaginator<T, TokenPaginatorState> {
    protected client: IClient;
    protected reqgen: PaginatorRequestGenerator;
    protected guard: PaginatorGuard<T>;
    protected max?: number;
    readonly state: TokenPaginatorState;
    constructor({client, reqgen, guard, state, max}: PaginatorDeps<T, TokenPaginatorState>);
    next(): IteratorResult<Promise<T>>;
    isPageTokenResponseMeta(m: APIResponseMeta): m is APIResponsePageTokenMeta;
    [Symbol.iterator](): this;
}
export declare function transformAPIResponse(r: superagentType.Response): APIResponse;
export declare function createFatalAPIFormat(req: superagentType.SuperAgentRequest, res: APIResponse): FatalException;
export declare function formatSuperAgentError(e: SuperAgentError): string;
export declare function formatAPIResponse(req: superagentType.SuperAgentRequest, r: APIResponse): string;
export declare function formatAPISuccess(req: superagentType.SuperAgentRequest, r: APIResponseSuccess): string;
export declare function formatAPIError(req: superagentType.SuperAgentRequest, r: APIResponseError): string;
