import { APIResponse, APIResponseError, APIResponseSuccess, AppAssociation, AppDetails, AuthToken, CommandPreRun, CordovaPackageJson, Deploy, DeployChannel, DeploySnapshot, DeploySnapshotRequest, DevServerMessage, ExitCodeException, GithubRepoAssociation, GithubRepo, GithubBranch, ICommand, INamespace, LogLevel, Org, PackageBuild, PackageProjectRequest, Plugin, Response, SSHKey, SecurityProfile, StarterManifest, SuperAgentError, User } from './definitions';
export declare const LOG_LEVELS: LogLevel[];
export declare function isCommand(cmd: ICommand | INamespace): cmd is ICommand;
export declare function isCommandPreRun(cmd: any): cmd is CommandPreRun;
export declare function isLogLevel(l: string): l is LogLevel;
export declare function isStarterManifest(o: Object): o is StarterManifest;
export declare function isCordovaPackageJson(o: Object): o is CordovaPackageJson;
export declare function isExitCodeException(e: Error): e is ExitCodeException;
export declare function isPlugin(p: any): p is Plugin;
export declare function isSuperAgentError(e: Error): e is SuperAgentError;
export declare function isAPIResponseSuccess(r: APIResponse): r is APIResponseSuccess;
export declare function isAPIResponseError(r: APIResponse): r is APIResponseError;
export declare function isOrg(o: object): o is Org;
export declare function isGithubRepo(r: object): r is GithubRepo;
export declare function isGithubBranch(r: object): r is GithubBranch;
export declare function isGithubRepoListResponse(r: APIResponse): r is Response<GithubRepo[]>;
export declare function isGithubBranchListResponse(r: APIResponse): r is Response<GithubBranch[]>;
export declare function isAppAssociation(a: object): a is AppAssociation;
export declare function isAppAssociationResponse(r: APIResponse): r is Response<AppAssociation>;
export declare function isGithubRepoAssociation(a: object): a is GithubRepoAssociation;
export declare function isAppDetails(d: Object): d is AppDetails;
export declare function isAppResponse(r: APIResponse): r is Response<AppDetails>;
export declare function isAppsResponse(r: APIResponse): r is Response<AppDetails[]>;
export interface OAuthLogin {
    redirect_url: string;
}
export declare function isOAuthLoginResponse(r: APIResponse): r is Response<OAuthLogin>;
export declare function isAuthTokensResponse(r: APIResponse): r is Response<AuthToken[]>;
export declare function isLegacyLoginResponse(r: APIResponse): r is Response<{
    user_id: string;
    token: string;
}>;
export declare function isProLoginResponse(r: APIResponse): r is Response<{
    user: {
        id: number;
        email: string;
    };
    token: string;
}>;
export declare function isSSHKeyListResponse(r: APIResponse): r is Response<SSHKey[]>;
export declare function isSSHKeyResponse(r: APIResponse): r is Response<SSHKey>;
export declare function isDeployResponse(r: APIResponse): r is Response<Deploy>;
export declare function isPackageProjectRequestResponse(r: APIResponse): r is Response<PackageProjectRequest>;
export declare function isPackageBuild(o: Object): o is PackageBuild;
export declare function isSecurityProfile(o: Object): o is SecurityProfile;
export declare function isSecurityProfileResponse(r: APIResponse): r is Response<SecurityProfile>;
export declare function isSecurityProfilesResponse(r: APIResponse): r is Response<SecurityProfile[]>;
export declare function isPackageBuildResponse(r: APIResponse): r is Response<PackageBuild>;
export declare function isPackageBuildsResponse(r: APIResponse): r is Response<PackageBuild[]>;
export declare function isDeployChannelResponse(r: APIResponse): r is Response<DeployChannel>;
export declare function isDeploySnapshotResponse(r: APIResponse): r is Response<DeploySnapshot>;
export declare function isDeploySnapshotRequestResponse(r: APIResponse): r is Response<DeploySnapshotRequest>;
export declare function isDevServerMessage(m: any): m is DevServerMessage;
export declare function isUser(u: object): u is User;
export declare function isUserResponse(r: APIResponse): r is Response<User>;
