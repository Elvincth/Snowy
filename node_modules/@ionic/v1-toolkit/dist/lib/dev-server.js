"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const utils_fs_1 = require("@ionic/utils-fs");
const chalk_1 = require("chalk");
const path = require("path");
const util = require("util");
exports.DEV_SERVER_PREFIX = '__ionic';
function isDevServerMessage(m) {
    return m
        && typeof m.category === 'string'
        && typeof m.type === 'string'
        && m.data && typeof m.data.length === 'number';
}
exports.isDevServerMessage = isDevServerMessage;
function injectScript(content, code) {
    let match = content.match(/<\/body>(?![\s\S]*<\/body>)/i);
    if (!match) {
        match = content.match(/<\/html>(?![\s\S]*<\/html>)/i);
    }
    if (match) {
        content = content.replace(match[0], `${code}${match[0]}`);
    }
    else {
        content += code;
    }
    return content;
}
exports.injectScript = injectScript;
function createDevServerHandler(options) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const devServerConfig = {
            consolelogs: options.consolelogs,
            wsPort: options.devPort,
        };
        const devServerJs = yield utils_fs_1.readFile(path.join(__dirname, '..', '..', 'assets', 'dev-server.js'), { encoding: 'utf8' });
        return (req, res) => {
            res.set('Content-Type', 'application/javascript');
            res.send(`window.Ionic = window.Ionic || {}; window.Ionic.DevServerConfig = ${JSON.stringify(devServerConfig)};\n\n` +
                `${devServerJs}`.trim());
        };
    });
}
exports.createDevServerHandler = createDevServerHandler;
function attachDevServer(app, options) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        app.get(`/${exports.DEV_SERVER_PREFIX}/dev-server.js`, yield createDevServerHandler(options));
    });
}
exports.attachDevServer = attachDevServer;
function injectDevServerScript(content) {
    if (content.indexOf(`/${exports.DEV_SERVER_PREFIX}/dev-server.js`) > -1) {
        // already added script
        return content;
    }
    const devServerScript = getDevServerScript();
    return injectScript(content, devServerScript);
}
exports.injectDevServerScript = injectDevServerScript;
function getDevServerScript() {
    return `
    <!-- Ionic Dev Server: Injected Dev Server Script -->
    <script src="${exports.DEV_SERVER_PREFIX}/dev-server.js" async="" defer=""></script>
`;
}
function createLiveReloadServer({ host, port, wwwDir }) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const tinylr = yield Promise.resolve().then(() => require('tiny-lr'));
        const lrserver = tinylr();
        lrserver.listen(port, host);
        return changedFiles => {
            lrserver.changed({
                body: {
                    files: changedFiles.map(changedFile => ('/' + path.relative(wwwDir, changedFile))),
                },
            });
        };
    });
}
exports.createLiveReloadServer = createLiveReloadServer;
function injectLiveReloadScript(content, port) {
    if (content.indexOf('/livereload.js') > -1) {
        // already added script
        return content;
    }
    const liveReloadScript = getLiveReloadScript(port);
    return injectScript(content, liveReloadScript);
}
exports.injectLiveReloadScript = injectLiveReloadScript;
function getLiveReloadScript(port) {
    const src = `${exports.DEV_SERVER_PREFIX}/tiny-lr/livereload.js`;
    return `
    <!-- Ionic Dev Server: Injected LiveReload Script -->
    <script>
      window.LiveReloadOptions = {
        host: window.location.hostname,
        port: ${port},
        snipver: true,
      };
    </script>
    <script src="${src}" async="" defer=""></script>
`;
}
function createDevLoggerServer(host, port) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const WebSocket = yield Promise.resolve().then(() => require('ws'));
        const wss = new WebSocket.Server({ host, port });
        wss.on('connection', ws => {
            ws.on('message', data => {
                let msg;
                try {
                    data = data.toString();
                    msg = JSON.parse(data);
                }
                catch (e) {
                    process.stderr.write(`Error parsing JSON message from dev server: "${data}" ${chalk_1.default.red(e.stack ? e.stack : e)}\n`);
                    return;
                }
                if (!isDevServerMessage(msg)) {
                    const m = util.inspect(msg, { colors: chalk_1.default.enabled });
                    process.stderr.write(`Bad format in dev server message: ${m}\n`);
                    return;
                }
                if (msg.category === 'console') {
                    let status; // unknown levels are normal color
                    if (msg.type === 'info' || msg.type === 'log') {
                        status = chalk_1.default.reset;
                    }
                    else if (msg.type === 'error') {
                        status = chalk_1.default.red;
                    }
                    else if (msg.type === 'warn') {
                        status = chalk_1.default.yellow;
                    }
                    if (status) {
                        process.stdout.write(`[${status('console.' + msg.type)}]: ${msg.data.join(' ')}\n`);
                    }
                    else {
                        process.stdout.write(`[console]: ${msg.data.join(' ')}\n`);
                    }
                }
            });
        });
        return wss;
    });
}
exports.createDevLoggerServer = createDevLoggerServer;
